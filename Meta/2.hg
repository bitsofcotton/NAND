s : Meta.s
# matrix operators and phenomenon collections.

Mat[type T] : type
  e : Vec[Vec[T]]
  ctor(const index, const type e0) : void
Texture[type C] : type
  e : Mat[C]
  ctor(const Complex[Int])
  ctor(xywh : , ** File **)
  dtor() : void
  friend SVG(t : Texture)
Status[type T] : Mat[T]
  ctor(json : JSON)
Perceptron[type T] : Mat[T]
Optron[type T] : Mat[T]
Delayron[type T] : Vec
BlockDiagram[type T] : Vec[Perceptron[T]]

Mat[type T] : op-noop : Mat
  []row(const index0) : Vec[T]
  []row(const index0) const : const Vec[T]
  []setCol(const index0, const vector) : void
  []col(const index0) const : const Vec
  [] (const Int)       : T
  [] (const Int) const : const T
  [] (const Int, const Int)       : T
  [] (const Int, const Int) const : const T
  !  ()             const : bool
  -  ()             const : Mat
  *  (const Vec)    const : Vec
  *  (const Mat)    const : Mat
  ** (const T)      const : Mat
  ** (const Mat)    const : Mat
  <d  (const Mat)   const : bool
  != (const Vec)    const : bool
  =  (Mat)       : Mat
  =  (const Mat) : Mat
  += (const Mat) : Mat
  -= (const Mat) : Mat
  *= (const T)   : Mat

Eigen(const Mat, Mat, Mat) : bool
Eigen(const Mat, const Mat, Mat, Mat, Mat) : bool
LU(const Mat, L: Mat, U: Mat) : bool
Cholesky(const Mat, C: Mat)   : bool
QR(const Mat, Qt: Mat, R: Mat) : bool
Schur(const Mat, U: Mat, A: Mat) : bool
SVD(const Mat, Ut: Mat, w: Vec, V: Mat) : bool
SVD(A: const Mat, B: const Mat, Ut: Mat, V0: Mat, V1: Mat) : bool
log(const Mat) : Mat
exp(const Mat) : Mat
pow(const Mat, p: const type) : Mat
pseudoInverse(const Mat) : Mat
feasible(A: const Mat, b: const Vec, interior: Vec) : bool
LP(A: const Mat, b: const Vec, c: const Vec) : Vec
QP(const Mat, const Vec, const Mat, const Vec) : Vec
Fourier(v: const Vec, inverse: const bool) : Vec
# if vector size is prime, not fast one.
FastFourier(v: const Vec, inverse: const bool) : Vec
Diff(v: const Vec, integrate: const bool) : Vec
MotherWavelet(const Vec, const Vec, const bool) : Vec

Texture[type C] : Mat[C] : Texture
  <<store!(xywh : , t : Texture)
  -clear!(xywh : , c : C)
  +point!(xy : Complex, c : C)
  +line!(xy : Complex, c : C)
  # make pattern
  +plot!(e : Equaion, xywh)
  +splot!(e : Equation, xyzwhz)
  +maze!(wh)
  # friend on them???
  +tilt(mesh : , xywh)
  +poincare!(e : Equation, Mat)
  # illust...
  # font is the implementation depends implementation.
  +renderFont[type type]()

PlayMovie[type C, d] : Texture[C] : Texture[C]
  <<play!()

Status[type] : op-noop : Mat[type]
  ++!(s : String) : Status

Perceptron[type T] : op-noop : Mat[T]
  +=(const Vec, const Vec) : bool
    # in
  +=(const Vec) : bool
    # in
  -=(const Vec) : Vec
    # out

Optron[type T] : op-noop : Mat[T]
  +=(const Vec, const Vec) : bool
    # in
  +=(const Vec) : bool
    # in
  -=(Vec) : Vec
    # out

Delayron[type T] : op-noop : Vec
  +=(const Vec, const Vec) : bool
    # in
  +=(const Vec) : bool
    # in
  -=(Vec) : Vec
    # out

BlockDiagram[type T] : op-noop : Vec[Perceptron[T]]
  +=(const Vec, const Vec) : bool
    # in
  +=(const Vec) : bool
    # in
  -=(Vec) : vec
    # out

