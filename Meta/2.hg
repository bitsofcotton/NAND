s : Meta.s
# matrix operators and phenomenon collections.

type Matrix[def type, def index0, def Array = Array] # Matrix
  def matrix : Matrix[type, index0]
  def vector : Vector[type, index0]
  def index  : Complex[index0]
  _e : Array[vector]
  ctor(const index, const type e0) : void
  []row(const index0) : vector
  []row(const index0) const : const vector
  []setCol(const index0, const vector) : void
  []col(const index0) const : const vector
  [] (const index)       : type
  [] (const index) const : const type
  [] (const index, const index)       : type
  [] (const index, const index) const : const type
  !  ()             const : bool
  -  ()             const : matrix
  *  (const vector) const : vector
  *  (const matrix) const : matrix
  ** (const type)   const : matrix
  <d  (const matrix) const : bool
  != (const vector) const : bool
  =  (matrix)       : matrix
  =  (const matrix) : matrix
  += (const matrix) : matrix
  -= (const matrix) : matrix
  *= (const type)   : matrix

Eigen(const Matrix, Matrix, Matrix) : bool
Eigen(const Matrix, const Matrix, Matrix, Matrix, Matrix) : bool
LU(const Matrix, L: Matrix, U: Matrix) : bool
Cholesky(const Matrix, C: Matrix)   : bool
QR(const Matrix, Qt: Matrix, R: Matrix) : bool
Schur(const Matrix, U: Matrix, A: Matrix) : bool
SVD(const Matrix, Ut: Matrix, w: Vector, V: Matrix) : bool
SVD(A: const Matrix, B: const Matrix, Ut: Matrix, V0: Matrix, V1: Matrix) : bool
log(const Matrix) : Matrix
exp(const Matrix) : Matrix
pow(const Matrix, p: const type) : Matrix
pseudoInverse(const Matrix) : Matrix
feasible(A: const Matrix, b: const Vector, interior: Vector) : bool
LP(A: const Matrix, b: const Vector, c: const Vector) : Vector
QP(const Matrix, const Vector, const Matrix, const Vector) : Vector
Fourier(v: const Vector, inverse: const bool) : Vector
# if vector size is prime, not fast one.
FastFourier(v: const Vector, inverse: const bool) : Vector
Diff(v: const Vector, integrate: const bool) : Vector
MotherWavelet(const Vector, const Vector, const bool) : Vector

type Texture[def color] : Matrix[color]
  ctor(const Complex[Int])
  ctor(xywh : , ** File **)
  dtor() : void
  <<store!(xywh : , t : Texture)
  -clear!(xywh : , c : color)
  +point!(xy : Complex, c : color)
  +line!(xy : Complex, c : color)
  # make pattern
  +plot!(e : Equaion, xywh)
  +splot!(e : Equation, xyzwhz)
  +maze!(wh)
  # friend on them???
  +tilt(mesh : , xywh)
  +poincare!(e : Equation, Matrix)
  friend SVG(t : Texture)
  # illust...
  # font is the implementation depends implementation.
  +renderFont[type type]()

type PlayMovie[def color, def driver] : Texture[color]
  ctor()
  <<play!()

type Status[type] : Matrix[type]
  ctor(json : JSON)
    
  dtor()
    
  ++!(s : String) : Status

type Perceptron[def type] : Matrix[type]
  def vec : Vector[type]
  +=(const vec, const vec) : bool
    # in
  +=(const vec) : bool
    # in
  -=(const vec) : vec
    # out

type Optron[def type] : Matrix[type]
  +=(const vec, const vec) : bool
    # in
  +=(const vec) : bool
    # in
  -=(vec) : vec
    # out

type Delayron[def type] : Array
  +=(const vec, const vec) : bool
    # in
  +=(const vec) : bool
    # in
  -=(vec) : vec
    # out

type BlockDiagram[def type] : Array[Perceptron[type]]
  def vec : Vector[type]
  +=(const vec, const vec) : bool
    # in
  +=(const vec) : bool
    # in
  -=(vec) : vec
    # out

