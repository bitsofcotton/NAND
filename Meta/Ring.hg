# commutative and non commutative...
# referring some mathematic results.

class Int[int bits] : Object
  def int  : Int[bits / 2]
  def dint : Int[bits]
  def lsb  : 0
  def msb  : bits - 1
  let e0   : int
  let e1   : int
  friend operator Int   (const dint) : Int
  friend operator bool  (const dint) : bool
  fn  ctor()    : void
  fn  ctor(def) : void
  fn  ctor(Int) : void
  fn  ctor(const Int) : void
  fn  dtor()    : void
  fn  operator []  (const Int) : bool
  fn  operator []  (const Int) const : bool
  fn  operator []  (const Int, const Int) : dint
  fn  operator []  (const Int, const Int) const : dint
  fn  operator ~   () const : int
  def zorn()           : dint
  fn  operator --  ()     : dint
  fn  operator *   (const dint) const : dint
  fn  operator **  (const dint) const : dint
  fn  operator /   (const dint) const : dint
  fn  operator <<  (const dInt) const : dint
  fn  operator >>  (const dInt) const : dint
  def less(const dint) : bool
  fn  operator !=  (const dint) const : bool
  fn  operator =   (dint)             : int
  fn  operator =   (const dint)       : int
  fn  operator +=  (const dint)       : int
  fn  operator &=  (const dint)       : int
  fn  operator |=  (const dint)       : int
  fn  operator ^=  (const dint)       : int

class ParaInt[def type, Int wbits, Int pbits]
  def int   : ParaInt[type, wbits, pbits]
  def bint  : type
  let _flat : Int[wbits]
  fn  ctor()     : void
  fn  ctor(def)  : void
  fn  ctor(type) : void
  fn  ctor(type, fn) : void
  fn  dtor()     : void
  fn  seed(const bint) : int
  fn  seed(const bint, fn) : int
  fn  dopara(fn) : void
  fn  operator []  (const Int) : bool
  fn  operator []  (const Int) const : bool
  fn  operator []  (const Int, const Int) : bool
  fn  operator []  (const Int, const Int) const : bool
  fn  operator !   () const : bool
  fn  operator ~   () const : int
  fn  operator ++  ()     : int
  fn  operator ++  (void) : int
  fn  operator --  ()     : int
  fn  operator --  (void) : int
  fn  operator -   ()     const : int
  fn  operator *   (const int) const : int
  fn  operator **  (const int) const : int
  fn  operator /   (const int) const : int
  fn  operator %   (const int) const : int
  fn  operator +   (const int) const : int
  fn  operator -   (const int) const : int
  fn  operator <<  (const Int) const : int
  fn  operator >>  (const Int) const : int
  fn  operator <   (const int) const : bool
  fn  operator <=  (const int) const : bool
  fn  operator >   (const int) const : bool
  fn  operator >=  (const int) const : bool
  fn  operator ==  (const int) const : bool
  fn  operator !=  (const int) const : bool
  fn  operator &   (const int) const : int
  fn  operator ^   (const int) const : int
  fn  operator |   (const int) const : int
  fn  operator &&  (const int) const : bool
  fn  operator ||  (const int) const : bool
  fn  operator =   (int)       : int
  fn  operator =   (const int) : int
  fn  operator +=  (const int) : int
  fn  operator -=  (const int) : int
  fn  operator *=  (const int) : int
  fn  operator **= (const int) : int
  fn  operator /=  (const int) : int
  fn  operator %=  (const int) : int
  fn  operator /=  (const int) : int
  fn  operator <<= (const Int) : int
  fn  operator >>= (const Int) : int
  fn  operator &=  (const int) : int
  fn  operator |=  (const int) : int

class Signed[def type]
  def int  : Signed[type]
  fn  ctor()    : void
  fn  ctor(def) : void
  fn  ctor(type) : void
  fn  ctor(const type) : void
  fn  ctor(int) : void
  fn  ctor(const int) : void
  fn  dtor()    : void
  fn  operator <   (const int) const : bool
  fn  operator <=  (const int) const : bool
  fn  operator >   (const int) const : bool
  fn  operator >=  (const int) const : bool

class pZ[def type, type z]
  def pz   : pz[type, z]
  let e    : type
  fn  ctor()    : void
  fn  ctor(def) : void
  fn  ctor(type) : void
  fn  ctor(const type) : void
  fn  dtor()    : void
  fn  ensure()  : pz
  def zorn() : pz

class Band[def type] : Complex[type]
  fn ctor() : void
  fn dtor() : void

fn gcd[def type](const type, const type) : type
fn lcm[def type](const type, const type) : type
fn factor2[def type](const type) : type
fn max[def type](const type, const type) : type
fn min[def type](const type, const type) : type
fn abs(const Signed) : type

// Solve ax + by = c in Z, a, b, c are const.
fn eucleidos[def type](type, type, const type, const type, const type) : void

class Float[Int mantissa, Int exponent] : Object
  def float : Float[mantissa, exponent]
  def intm  : Int[mantissa]
  def intw  : Int[mantissa * Int(2)]
  def inte  : Int[exponent]
  let _m    : intm
  let _e    : inte
  let _flag : int
  def INF   : const int("0x1")
  def NaN   : const int("0x2")
  def SIGN  : const int("0x4")
  def WORK  : const int("0x8")
  fn  ctor()    : void
  fn  ctor(def) : void
  fn  dtor()    : void
  fn  roundMulDiv(intw)   : bool
  fn  operator ! () const : bool
  fn  operator - () const : float
  fn  operator *  (const float) const : float
  fn  operator ** (const float) const : float
  fn  operator /  (const float) const : float
  fn  operator %  (const float) const : float
  fn  operator +  (const float) const : float
  fn  operator -  (const float) const : float
  fn  operator <  (const float) const : bool
  fn  operator <= (const float) const : bool
  fn  operator >  (const float) const : bool
  fn  operator >= (const float) const : bool
  fn  operator == (const float) const : bool
  fn  operator != (const float) const : bool
  fn  operator =  (float)        : float
  fn  operator =  (const float)  : float
  fn  operator += (const float)  : float
  fn  operator -= (const float)  : float
  fn  operator *= (const float)  : float
  fn  operator **= (const float) : float
  fn  operator /= (const float)  : float
  fn  operator %= (const float)  : float
  fn  isnan() const : bool
  fn  isinf() const : bool
  fn  ceil()  : float
  fn  floor() : float
  friend operator Int(const float) const : Int

class WFloat[def float_t] : Object
  def float : WFloat[float_t]
  def bool  : Int[1]
  let _f0   : float_t
  let _f1   : float_t
  fn  ctor()    : void
  fn  ctor(def) : void
  fn  dtor()    : void
  fn  operator !  () const : bool
  fn  operator -  () const : float
  fn  operator *  (const float) const : float
  fn  operator ** (const float) const : float
  fn  operator /  (const float) const : float
  fn  operator %  (const float) const : float
  fn  operator +  (const float) const : float
  fn  operator -  (const float) const : float
  fn  operator <  (const float) const : bool
  fn  operator <= (const float) const : bool
  fn  operator >  (const float) const : bool
  fn  operator >= (const float) const : bool
  fn  operator == (const float) const : bool
  fn  operator != (const float) const : bool
  fn  operator =  (const float) : float
  fn  operator += (const float) : float
  fn  operator -= (const float) : float
  fn  operator *= (const float) : float
  fn  operator **= (const float) : float
  fn  operator /= (const float) : float
  fn  operator %= (const float) : float
  fn  isnan() const : bool
  fn  isinf() const : bool

class Fraction[def type] : Object
  def fraction : Fraction[type]
  def bool     : Int[1]
  let _sign  : bool
  let _n     : type
  let _d     : type
  fn  ctor() : void
  fn  ctor(type, type) : void
  fn  ctor(const type, const type) : void
  fn  dtor() : void
  fn  operator ** (const fraction) const : fraction
  fn  operator <  (const fraction) const : bool
  fn  operator <= (const fraction) const : bool
  fn  operator >  (const fraction) const : bool
  fn  operator >= (const fraction) const : bool
  fn  operator != (const fraction) const : bool
  fn  operator =  (fraction)       : fraction
  fn  operator =  (const fraction) : fraction
  fn  operator += (const fraction) : fraction
  fn  operator *= (const fraction) : fraction
  fn  operator /= (const fraction) : fraction

fn floor[def type](type) : type
fn ceil[def type](type)  : type
fn isnan[def type](type) : bool
fn isinf[def type](type) :bool

