using Meta.Ring

friend Int[Int bits]::operator Int (const dint) : Int
  return Int(e0)

friend Int[Int bits]::operator bool (const dint) : bool
  return bool(e0) || bool(e1)

fn Int[Int bits]::ctor() : void
  return

fn Int[Int bits]::ctor(def d) : void
  let zero : static const dint(0)
  let ten  : static const dint(10)
  this = zero
  for x in d:
    this *= ten
    this += dint(x)
  return

fn Int[Int bits]::ctor(const Int d) : void
  e0 = d
  e1 = int(0)
  return

fn Int[Int bits]::dtor() : void
  super()
  return

fn Int[Int bits]::operator [] (const Int idx) : bool
  return const(this)[idx]

fn Int[Int bits]::operator [] (const Int idx) const : bool
  assert(Int(0) <= idx && idx < bits)
  if(idx < bits / 2)
    return e0 >> idx
  return e1 >> (idx - bits / 2)

fn Int[Int bits]::operator [] (const Int start, const Int end) : dint
  return const(this)[start, end]

fn Int[Int bits]::operator [] (const Int start, const Int end) const : dint
  assert(Int(0) <= start && start < bits)
  assert(Int(0) <= end   && end   < bits)
  return (this >> start) & ((dint(1) << (start - end)) - dint(1))

fn Int[Int bits]::operator ~  () const : dint
  let work : dint()
  work.e0 = ~ e0
  work.e1 = ~ e1
  return work

fn Int[Int bits]::operator zorn() : dint
  ++ e0
  if(! e0)
    ++ e1
  return this

fn Int[Int bits]::operator -- ()       : dint
  if(! e0)
    -- e1
  -- e0
  return this

fn Int[Int bits]::operator *  (const dint src) const : dint
  let res : dint(0)
  for bit in src:
    if(bit):
      res += this << bit.idx
  return res

fn Int[Int bits]::operator ** (const dint src) const : dint
  let res  : dint(1)
  let work : auto(this)
  for bit in src:
    if(bit):
      res *= work
    work *= work
  return res

#fn Int[Int bits]::operator /  (const dint src) const : dint
#fn Int[Int bits]::operator << (const Int src) const : dint
#fn Int[Int bits]::operator >> (const Int src) const : dint
 
fn Int[Int bits]::less(const dint src) const : bool
  return (this - src)[msb]

fn Int[Int bits]::operator == (const dint src) : bool
  return bool(this ^ src)

fn Int[Int bits]::operator = (dint src) : dint
  e0 = src.e0
  e1 = src.e1
  return this

fn Int[Int bits]::operator = (const dint src) : dint
  e0 = const(src.e0)
  e1 = const(src.e1)
  return this

fn Int[Int bits]::operator += (const dint src) : dint
  ## assembler??

fn Int[Int bits]::operator &= (const dint src) : dint
  e0 &= src.e0
  e1 &= src.e1
  return this

fn Int[Int bits]::operator |= (const dint src) : dint
  e0 |= src.e0
  e1 |= src.e1
  return this

fn Int[Int bits]::operator ^= (const dint src) : dint
  e0 ^= src.e0
  e1 ^= src.e1
  return this

