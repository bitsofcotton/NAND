using Library.Algorithm.System

fn Int[0]::operator ! () : bool
  return ! bool(leaf)

fn Int[0]::operator ++ () : leaf
  return leaf.zorn()

fn Int[0]::operator ++ (void) : leaf
  let work : auto(leaf)
  ++ leaf
  return work

fn Int[0]::operator -- (void) : leaf
  let work : auto(leaf)
  -- leaf
  return work

fn Int[0]::operator -  () const : leaf
  return ++ auto(~ leaf)

fn Int[0]::operator *  (const leaf src) const : leaf
  return auto(leaf) *= src

fn Int[0]::operator ** (const leaf src) const : leaf
  return auto(leaf) **= src

fn Int[0]::operator /  (const leaf src) const : leaf
  return auto(leaf) /= src

fn Int[0]::operator %  (const leaf src) const : leaf
  return leaf - (leaf / src) * src

fn Int[0]::operator << [def type] (const type src) const : leaf
  return auto(this) <<= src

fn Int[0]::operator >> [def type] (const type src) const : leaf
  return auto(this) >>= src

fn Int[0]::operator +  (const leaf src) const : leaf
  return auto(leaf) += src

fn Int[0]::operator -  (const leaf src) const : leaf
  return auto(leaf) -= src

fn Int[0]::operator &  (const leaf src) const : leaf
  return auto(leaf) &= src

fn Int[0]::operator |  (const leaf src) const : leaf
  return auto(leaf) |= src

fn Int[0]::operator ^  (const leaf src) const : leaf
  return auto(leaf) ^= src

fn Int[0]::operator <  (const leaf src) const : bool
  return leaf.less(src)

fn Int[0]::operator <= (const leaf src) const : bool
  return this < src || this == src

fn Int[0]::operator >  (const leaf src) const : bool
  return ! (this <= src)

fn Int[0]::operator >= (const leaf src) const : bool
  return ! (this <  src)

fn Int[0]::operator == (const leaf src) const : bool
  return ! (this == src)

fn Int[0]::operator != (const leaf src) const : bool
  return ! (this != src)

fn Int[0]::operator && (const leaf src) const : bool
  return bool(leaf) && bool(src)

fn Int[0]::operator || (const leaf src) const : bool
  return bool(leaf) || bool(src)

fn Int[0]::operator += (const leaf src) : leaf
  return leaf = leaf + src

fn Int[0]::operator -= (const leaf src) : leaf
  return leaf += - src

fn Int[0]::operator *= (const leaf src) : leaf
  return leaf = leaf * src

fn Int[0]::operator **= (const leaf src) : leaf
  return leaf = leaf ** src

fn Int[0]::operator %= (const leaf src) : leaf
  return leaf = leaf % src

fn Int[0]::operator /= (const leaf src) : leaf
  return leaf = leaf / src

fn Int[0]::operator <<= [def type] (const type src) : leaf
  return leaf = leaf << src

fn Int[0]::operator >>= [def type] (const type src) : leaf
  return leaf = leaf >> src

fn Int[0]::operator &= (const leaf src) : leaf
  return leaf = leaf & src

fn Int[0]::operator |= (const leaf src) : leaf
  return leaf = leaf | src

fn Int[0]::operator ^= (const leaf src) : leaf
  return leaf = leaf ^ src

