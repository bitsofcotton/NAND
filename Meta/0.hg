s : Meta.s
# referring some mathematic results, 2, ... term operators.

pair[type T] : type
  first  : T
  second : T
DInt[type T] : pair[T]
Float[Int mantissa, Int exponent] : type
  m : mantissa
  e : exponent
  ctor()
WFloat[type T] : pair[T]
Fraction[type T] : type
  sign : bool
  n    : T
  d    : T
  ctor()
Complex[type T] : type
  r : T
  i : T
  ctor()
  ctor(T)
  ctor(pair[T])
Quarternion[type T] : type
  x : T
  y : T
  z : T
  w : T
  ctor(T)
  ctor(Complex)
  ctor(Quarternion)

EQuarternionion : BNF # EQuarternionion as BNF expression
Logic : EQuarternionion # Logic as EQuarternionion expression
Glay[type C] : type
  g : C
  ctor(src : RGB[C])
    # not optimal, we should refer color space in wikipedia.
    res = (src.r + src.g + src.b) / C(3)
RGB[type C] : type
  r : C
  g : C
  b : C
  ctor(src : Glay[C])
    res.r = type(src)
    res.g = type(src)
    res.b = type(src)
RGBA[type C] : type
  r : C
  g : C
  b : C
  a : C
HSV[type C] : type
  h : C
  s : C
  v : C
HSB[type C] : type
  h : C
  s : C
  b : C
Lab[type C] : type
  l : C
  a : C
  b : C

DInt[op op0, type T] : op-noop : DInt[T]
  []  (const Int) : s.bool
  []  (const Int) const : s.bool
  []  (const Int, const Int) : DInt[T]
  []  (const Int, const Int) const : DInt[T]
  ~   () const : DInt[T]
    res.first  =op0 ~op0 first
    res.second =op0 ~op0 second
  ++  () : DInt[T]
    ++op0 e0
    (!op0 e0 ? ++op0 e1 : e1)
  --  () : DInt[T]
    (! e0 ? --op0 e1 : e1)
    --op0 e0
  *   (src : (DInt[T] | const DInt[T])) const : DInt[T]
    res =op0 DInt[T](0)
    for[Int] bit from 0 to bitsof(DInt[T]) :
      (this[bit] ? res +=op0 this <<op0 bit : res)
  **  (src : (DInt[T] | const DInt[T])) const : DInt[T]
    res  =op0 DInt[T](1)
    work : auto(this)
    for[Int] bit from 0 to bitsof(DInt[T]) :
      (this[bit] ? res *=op0 work : res)
      work *=op0 work
  /   (const DInt[T]) const : DInt[T]
  <<  (const DInt[T]) const : DInt[T]
  >>  (const DInt[T]) const : DInt[T]
  <   (src : (DInt[T] | const DInt[T])) const : bool
    res = (this -op0 src)[op0 msb]
  !=  (const DInt[T]) const : bool
    res = ! (this ==op0 src)
  ==  (src : (DInt[T] | const DInt[T])) const : bool
    res = bool(this ^op0 src)
  =   (DInt[T])             : DInt[T]
  =   (const DInt[T])       : DInt[T]
  +=  (const DInt[T])       : DInt[T]
  &=  (src : (DInt[T] | const DInt[T])) : DInt[T]
    e0 &=op0 src.e0
    e1 &=op0 src.e1
  |=  (src : (DInt[T] | const DInt[T])) : DInt[T]
    e0 |=op0 src.e0
    e1 |=op0 src.e1
  ^=  (src : (DInt[T] | const DInt[T])) : DInt[T]
    e0 ^=op0 src.e0
    e1 ^=op0 src.e1

Signed[type T] : DInt : DInt[T]
  <   (const DInt[T]) const : bool
  <=  (const DInt[T]) const : bool
  >   (const DInt[T]) const : bool
  >=  (const DInt[T]) const : bool

pZ[type Z, Z p] : Z : Z
  leave() : Z
    res %= p

gcd[type T](const T, const T) : T # greatest common divide
lcm[type T](const T, const T) : T # least common multiply
factor2[type T](const T) : T # factor 2
max[type T](const T, const T) : T # maximum
min[type T](const T, const T) : T # minimum
abs(const Signed) : Signed # absolute value

# Solve ax + by = c in Z, a, b, c are const.
eucleidos[type T](x: T, y: T, a: const T, b:const T, c: const T) : void

INF  : static const Int("0x1")
NaN  : static const Int("0x2")
SIGN : static const Int("0x4")
WORK : static const Int("0x8")
Float[type F] : op-noop : Float
  leave()
  ! () const : bool
  - () const : Float
  *  (const Float) const : Float
  ** (const Float) const : Float
  /  (const Float) const : Float
  %  (const Float) const : Float
  +  (const Float) const : Float
  -  (const Float) const : Float
  <  (const Float) const : bool
  <= (const Float) const : bool
  >  (const Float) const : bool
  >= (const Float) const : bool
  == (const Float) const : bool
  != (const Float) const : bool
  =  (Float)        : Float
  =  (const Float)  : Float
  += (const Float)  : Float
  -= (const Float)  : Float
  *= (const Float)  : Float
  **= (const Float) : Float
  /= (const Float)  : Float
  %= (const Float)  : Float
  friend Int() const

WFloat : op-noop : WFloat
  !  () const : bool
  -  () const : WFloat
  *  (const WFloat) const : float
  ** (const WFloat) const : float
  /  (const WFloat) const : float
  %  (const WFloat) const : float
  +  (const WFloat) const : float
  -  (const WFloat) const : float
  <  (const WFloat) const : bool
  <= (const WFloat) const : bool
  >  (const WFloat) const : bool
  >= (const WFloat) const : bool
  == (const WFloat) const : bool
  != (const WFloat) const : bool
  =  (const WFloat) : WFloat
  += (const WFloat) : WFloat
  -= (const WFloat) : WFloat
  *= (const WFloat) : WFloat
  **= (const WFloat) : WFloat
  /= (const WFloat) : WFloat
  %= (const WFloat) : WFloat

Fraction[type T] : op-noop : Fraction
  ** (const Fraction) const : Fraction
  <  (const Fraction) const : bool
  <= (const Fraction) const : bool
  >  (const Fraction) const : bool
  >= (const Fraction) const : bool
  != (const Fraction) const : bool
  =  (Fraction)       : Fraction
  =  (const Fraction) : Fraction
  += (const Fraction) : Fraction
  *= (const Fraction) : Fraction
  /= (const Fraction) : Fraction

absfloor[type F](const F) : type
absceil[type F](const F)  : type
isnan[type F](const F) : bool
isinf[type F](const F) : bool

# finite gropus, and make new finite series from them with some method.
# Cryption bases
# Hash bases
# Leed solomon
# Hamming
# Vitavi
# Huge...

# transcendal op on eQuarternionion should be in generic programming compatible form in this
bothside[type](type, type, type) : type # bothside method.
newton[type, f](type) : type # newton method with f'
superGeometry[type, da(type) : type, db(type) : type, def f] : type # Super geometry series. R.B. 
sqrt[type](type) : type # Square root of x
pi[type](type)   : type # Pi
exp[type](type)  : type # exponent
log[type](type)  : type # logarithm
sin[type](type)  : type # sine curve
cos[type](type)  : type # cosine curve
tan[type](type)  : type # tangent function
asin[type](type) : type # arcsine function
acos[type](type) : type # arccosine function
atan[type](type) : type # arctangent function of periodical
atan2[type](type, type) : type # arctangent function y, x
exp(Complex)  : Complex # Complex exponent
log(Complex)  : Complex # Complex logarithm
sin(Complex)  : Complex # Complex sine
cos(Complex)  : Complex # Complex cosine
tan(Complex)  : Complex # Complex tangent
csc(Complex)  : Complex # Complex cosecant
sec(Complex)  : Complex # Complex secant
cot(Complex)  : Complex # Complex cotangent
asin(Complex) : Complex # Complex arcsine
acos(Complex) : Complex # Complex arccosine
atan(Complex) : Complex # Complex arctangent
sinh(Complex) : Complex # hyperbolic sine
cosh(Complex) : Complex # hyperbolic cosine
tanh(Complex) : Complex # hyperbolic tangent
Li2(Complex)  : Complex # Li2
SolveSeries[type](coeff(type) : type, const type x) : type # Calculate taylor series they converges
SolveSeries[type](const Array[type] coeff, const type x) : type # Calculate finite mother functions
InvertSeries[type](const Array[type] coeff, const type y) : type # Calculate invert of taylor series
Melin[type](const Array[type] coeff, const type y) : * # Melin conversion

zero[type T] : static T(0)
Complex[T] : no-op : Complex[T]
  []  (const Int) : Complex
  !   () const    : bool
  ~   () const    : Complex
  -   () const    : Complex
  *   (const Complex) const : Complex
  **  (const Complex) const : Complex
  /   (const Complex) const : Complex
  !=  (const Complex) const : bool
  &&  (const Complex) const : bool
  ||  (const Complex) const : bool
  =   (Complex)       : Complex
  =   (const Complex) : Complex
  +=  (const Complex) : Complex
  -=  (const Complex) : Complex
  /=  (const Complex) : Complex
  /=  (const T) : Complex

abs[type T](const Complex) : T
arg[type T](const Complex) : T

Quarternion[type T] : no-op : Quarternion
  []  (const Int) : type
  !   () const    : bool
  ~   () const    : Quarternion
  -   () const    : Quarternion
  *   (const Quarternion) const : Quarternion
  **  (const Quarternion) const : Quarternion
  /   (const Quarternion) const : Quarternion
  +   (const Quarternion) const : Quarternion
  -   (const Quarternion) const : Quarternion
  !=  (const Quarternion) const : bool
  &&  (const Quarternion) const : bool
  ||  (const Quarternion) const : bool
  =   (Quarternion)       : Quarternion
  =   (const Quarternion) : Quarternion
  +=  (const Quarternion) : Quarternion
  -=  (const Quarternion) : Quarternion
  /=  (const T) : Quarternion

