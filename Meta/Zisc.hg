using Meta.Linear

class Perceptron[def type] : Matrix[type]
  def vec : Vector[type]
  fn ctor() : void
  fn dtor() : void
  fn study(const vec in, const vec tag) : type
  fn learn(const vec in)    : type
  fn improve(const vec in)  : type
  fn gettag(const vec in)   : vec
  fn tag2out(const vec tag) : vec

class BlockDiagram[def type] : Array[Perceptron[type]]
  def vec : Vector[type]
  fn ctor(const Matrix[Int] d) : void
  fn dtor() : void
  fn study(const vec in, const vec tag) : type
  fn learn(const vec in)    : type
  fn improve(const vec in)  : type
  fn gettag(const vec in)   : vec
  fn tag2out(const vec tag) : vec

class Manuscript : Zisc
  fn ctor() : void
  fn dtor() : void

class RecognizeSpeak : Zisc
  fn ctor() : void
  fn dtor() : void

class Speak : Zisc
  fn ctor() : void
  fn dtor() : void

class ZeroKnowledgeRecog : Zisc
  fn ctor() : void
  fn dtor() : void

