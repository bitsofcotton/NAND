# System root.

Range[type T, T lower, T upper, T default] : T # Restricted type
  ctor() : T
    this = default
  leave() : T
    this < lower ? this = lower
VecDisk[type T] : type
  _handle : Array # Handle to disk offset
  _disk : File # disk
Map[type Dst, type Src] : Pair[Dst, SRc]
Schedule[schedFunc()] : Pair[Int, Int]
GC[type T] : type
  _cnt : Signed[Int]
  _ent : type
  _ref : GC[type]
  ctor()
  ctor(type)
  ctor(GC[type])
  dtor()

op[op op0, type T] : add-complement[op op0] weak : T
  !  ()     : inline bool # Auto generated.
    res = ! bool(leaf)
  ++ ()     : inline const typeof(leaf) # Auto generated.
    leaf ++op0
  ++ (void) : inline typeof(leaf) # Auto generated.
    work : auto(leaf)
    ++op0 leaf
    res =op0 work
  -- (void) : inline typeof(leaf) # Auto generated.
    work : auto(leaf)
    --op0 leaf
    res =op0 work
  -  () const : inline typeof(leaf) # Auto generated.
    res =op0 ++op0 auto(~op0 leaf)
  *   (src : const typeof(leaf)) const : inline typeof(leaf) # Auto generated.
    res =op0 auto(leaf) *=op0 src
  **  (src : const typeof(leaf)) const : inline typeof(leaf) # Auto generated.
    res =op0 auto(leaf) **=op0 src
  /  (src : const typeof(leaf)) const : inline typeof(leaf) # Auto generated.
    res =op0 auto(leaf) /=op0 src
  %  (src : const typeof(leaf)) const : inline typeof(leaf) # Auto generated.
    res =op0 leaf -op0 (leaf /op0 src) *op0 src
  +  (src : const typeof(leaf)) const : inline typeof(leaf) # Auto generated.
    res =op0 auto(leaf) +=op0 src
  -  (src : const typeof(leaf)) const : inline typeof(leaf) # Auto generated.
    res =op0 auto(leaf) -=op0 src
  << [def type] (src : const type) const : inline typeof(leaf) # Auto generated.
    res =op0 auto(leaf) <<=op0 src
  >> [def type] (src : const type) const : inline typeof(leaf) # Auto generated.
    res =op0 auto(leaf) >>=op0 src
  <  (src : const typeof(leaf)) const : inline bool # Auto generated.
    res = ! (this >=op0 src)
  <= (src : const typeof(leaf)) const : inline bool # Auto generated.
    res = this <op0 src || this ==op0 src
  >  (src : const typeof(leaf)) const : inline bool # Auto generated.
    res = ! (this <=op0 src)
  >= (src : const typeof(leaf)) const : inline bool # Auto generated.
    res = ! (this <op0  src)
  == (src : const typeof(leaf)) const : inline bool # Auto generated.
    res = ! (this !=op0 src)
  != (src : const typeof(leaf)) const : inline bool # Auto generated.
    res = ! (this ==op0 src)
  &  (src : const typeof(leaf)) const : inline typeof(leaf) # Auto generated.
    res =op0 auto(leaf) &=op0 src
  ^  (src : const typeof(leaf)) const : inline typeof(leaf) # Auto generated.
    res =op0 auto(leaf) ^=op0 src
  |  (src : const typeof(leaf)) const : inline typeof(leaf) # Auto generated.
    res =op0 auto(leaf) |=op0 src
  && (src : const typeof(leaf)) const : inline bool # Auto generated.
    res = bool(leaf) && bool(src)
  || (src : const typeof(leaf)) const : inline bool # Auto generated.
    res = bool(leaf) || bool(src)
  += (src : const typeof(leaf)) const : inline const typeof(leaf) # Auto generated.
    leaf =op0 leaf +op0 src
  -= (src : const typeof(leaf)) const : inline const typeof(leaf) # Auto generated.
    leaf +=op0 -op0 src
  *= (src : const typeof(leaf)) const : inline const typeof(leaf) # Auto generated.
    leaf =op0 leaf *op0 src
  **= (src : const typeof(leaf)) const : inline const typeof(leaf) # Auto generated.
    leaf =op0 leaf **op0 src
  /= (src : const typeof(leaf)) const : inline const typeof(leaf) # Auto generated.
    leaf =op0 leaf /op0 src
  %= (src : const typeof(leaf)) const : inline const typeof(leaf) # Auto generated.
    leaf =op0 leaf %op0 src
  <<= [def type] (src : const type) const : inline const typeof(leaf) # Auto generated.
    leaf =op0 leaf <<op0 src
  >>= [def type] (src : const type) const : inline const typeof(leaf) # Auto generated.
    leaf =op0 leaf >>op0 src
  &= (src : const typeof(leaf)) const : inline const typeof(leaf) # Auto generated.
    leaf =op0 leaf &op0 src
  ^= (src : const typeof(leaf)) const : inline const typeof(leaf) # Auto generated.
    leaf =op0 leaf ^op0 src
  |= (src : const typeof(leaf)) const : inline const typeof(leaf) # Auto generated.
    leaf =op0 leaf |op0 src

Call(def, Vec)   : Int # Call exterior
Signal(Int, Int)   : Int # Signal
SignalHandler(Int, Int) : Int # Signal
Thread(delegate() : Int) : Int # Thread

Struct[Vec[Int] size] : op-noop : void # Handle binary structure
  # file operations.

SortIdx[type T, op comp](const Vec in) : Vec[Int]

Map[type Dst, type Src] : op-noop : Map
  [] (const typedst a) : typesrc
  []?(const typedst a) : bool

Graph[type T] : Mat[T] # Graph plotter.
  +=place() : Vec

# implementation depends on implementation, so shift/...
Disk[V = VecOnDisk, lowlayer] : Vec # Protocols: extremely huge.

Gate[layer, lowlayer] : lowlayer # OSI reference

# Cluster : redundancy, interface.

# UTF, UCS, jis, euc, sjis are in the Shift/...
Text[T] : Vec[T]

cout : ...
cerr : ...

# Huge...
BNF[type T] :
SGML[type T] :
stemming(t : (Text | const Text)) : Vec[...]

Regex[type T]() : Vec[Int]

Gregorious[type T] : T # calender
  unix : Int
  ctor()

# some procedures like:
#   attend/leave time logging and calculate total time with time zone.

# garbage collection with reference count type.

