# System root.

type Int[0] : # Root. Auto generated.
  def invertible  : 0
  def abel        : 0
  def commutative : 0
  !  ()     : inline bool # Auto generated.
    res = ! bool(leaf)
  ++ ()     : inline const typeof(leaf) # Auto generated.
    leaf ++
  ++ (void) : inline typeof(leaf) # Auto generated.
    work : auto(leaf)
    ++ leaf
    res = work
  -- (void) : inline typeof(leaf) # Auto generated.
    work : auto(leaf)
    -- leaf
    res = work
  -  () const : inline typeof(leaf) # Auto generated.
    res = ++ auto(~ leaf)
  *   (src : const typeof(leaf)) const : inline typeof(leaf) # Auto generated.
    res = auto(leaf) *= src
  **  (src : const typeof(leaf)) const : inline typeof(leaf) # Auto generated.
    res = auto(leaf) **= src
  /  (src : const typeof(leaf)) const : inline typeof(leaf) # Auto generated.
    res = auto(leaf) /= src
  %  (src : const typeof(leaf)) const : inline typeof(leaf) # Auto generated.
    res = leaf - (leaf / src) * src
  +  (src : const typeof(leaf)) const : inline typeof(leaf) # Auto generated.
    res = auto(leaf) += src
  -  (src : const typeof(leaf)) const : inline typeof(leaf) # Auto generated.
    res = auto(leaf) -= src
  << [def type] (src : const type) const : inline typeof(leaf) # Auto generated.
    res = auto(leaf) <<= src
  >> [def type] (src : const type) const : inline typeof(leaf) # Auto generated.
    res = auto(leaf) >>= src
  <  (src : const typeof(leaf)) const : inline bool # Auto generated.
    res = ! (this >= src)
  <= (src : const typeof(leaf)) const : inline bool # Auto generated.
    res = this < src || this == src
  >  (src : const typeof(leaf)) const : inline bool # Auto generated.
    res = ! (this <= src)
  >= (src : const typeof(leaf)) const : inline bool # Auto generated.
    res = ! (this <  src)
  == (src : const typeof(leaf)) const : inline bool # Auto generated.
    res = ! (this != src)
  != (src : const typeof(leaf)) const : inline bool # Auto generated.
    res = ! (this == src)
  &  (src : const typeof(leaf)) const : inline typeof(leaf) # Auto generated.
    res = auto(leaf) &= src
  ^  (src : const typeof(leaf)) const : inline typeof(leaf) # Auto generated.
    res = auto(leaf) ^= src
  |  (src : const typeof(leaf)) const : inline typeof(leaf) # Auto generated.
    res = auto(leaf) |= src
  && (src : const typeof(leaf)) const : inline bool # Auto generated.
    res = bool(leaf) && bool(src)
  || (src : const typeof(leaf)) const : inline bool # Auto generated.
    res = bool(leaf) || bool(src)
  += (src : const typeof(leaf)) const : inline const typeof(leaf) # Auto generated.
    leaf = leaf + src
  -= (src : const typeof(leaf)) const : inline const typeof(leaf) # Auto generated.
    leaf += - src
  *= (src : const typeof(leaf)) const : inline const typeof(leaf) # Auto generated.
    leaf = leaf * src
  **= (src : const typeof(leaf)) const : inline const typeof(leaf) # Auto generated.
    leaf = leaf ** src
  /= (src : const typeof(leaf)) const : inline const typeof(leaf) # Auto generated.
    leaf = leaf / src
  %= (src : const typeof(leaf)) const : inline const typeof(leaf) # Auto generated.
    leaf = leaf % src
  <<= [def type] (src : const type) const : inline const typeof(leaf) # Auto generated.
    leaf = leaf << src
  >>= [def type] (src : const type) const : inline const typeof(leaf) # Auto generated.
    leaf = leaf >> src
  &= (src : const typeof(leaf)) const : inline const typeof(leaf) # Auto generated.
    leaf = leaf & src
  ^= (src : const typeof(leaf)) const : inline const typeof(leaf) # Auto generated.
    leaf = leaf ^ src
  |= (src : const typeof(leaf)) const : inline const typeof(leaf) # Auto generated.
    leaf = leaf | src
  # stub for leafs.
  def each()
  def progress()
  def is_progress()
    # Mutex, then, access limitation.
  def print()
  def test()
  def in(const Array)
  def out()

type Int[__pointer_bits__] : Int[0] # System wide unique int
  def abel        : 1
  def commutative : 1

type void   : Int[0] # void
type Object : Int[0] # Object
type bool   : Int[__pointer_bits__] # bool
type int    : Int[__pointer_bits__] # synonym

Export(def) : void # Export as library
Import(def) : bool # Import library
Call(def, Array)   : Int # Call exterior
Signal(Int, Int)   : Int # Signal
SignalHandler(Int, Int) : Int # Signal
Thread(delegate() : Int) : Int # Thread
mcopy(int dst, int src) : void # mem copy

type Range[def type, type lower, type upper, type default] : type # Restricted type
  ctor() : inline typeof(leaf)
    this = default
  leave() : inline typeof(leaf)
    this < lower ? this = lower
    upper < this ? this = upper

type State[Int states] : Array[Array[]] # Handle automata states

type Struct[Array[Int] size] : void # Handle binary structure
  ctor()
  dtor()
  # file operations.

type Pool[Int size] : Object # Root memory pool that unique on process
  _ptr : Int # Pointer on the memory
  ctor()
  dtor()
  +=assign[def type](size : const Int) : type
  -=release[def type](type) : bool
  # Linked list*

type PoolDisk[Int size] : Object # Disk data pool
  _handle : Array # Handle to disk offset
  _disk : File # disk
  ctor()
  dtor()
  +=assign[def type](const Int as) : type
  -=release[def type](type) : bool

type Array[def type, def p = Pool, p pool] : Object # Array on pool
  _ptr : Int
  ctor()
  ctor(Int size)
  +=push (p : type) : typeof(this)
  -=delete (idx : Int) : typeof(this)
  -=pop (idx : Int) : type
  [] (const Int idx) : type
  +=resize(const Int size, const type init) : void
  +=reserve(const Int size) : void
  [last] () : type
  [size] () : Int

type Sorted[def type] : Array[type] # sorted array indices
  # with heap sort.
  _sort : Array[Int]
  ctor(a : const Array[type]) : void
  +=push (p : type) : typeof(this)
  -=delete (idx : Int) : typeof(this)
  -=pop (idx : Int) : type
  [] (const Int idx) : type
  +=resize(const Int size, const type init) : void
  +=reserve(const Int size) : void
  [last] () : type
  [size] () : Int
  [min] ()  : type
  [median] () : type
  [max] ()  : type

type Pair[def type0, def type1] : Object # Pairwise
  def pair : Pair[type0, type1]
  e0 : type0
  e1 : type1
  ctor()
  ctor(type0 e0, type1 e1) : inline typeof(leaf)
    this.e0 = e0
    this.e1 = e1
  <  (src : const pair) : inline bool
    res = e0 < src.e0 || (e0 == src.e0 && e1 < src.e1)
  != (src : const pair) : inline bool
    res = e0 != src.e0 || e1 != src.e1

type Map[def typedst, def typesrc] : Sorted[Pair[typedst, typesrc]] # Map
  [] (const typedst a) : typesrc
  []?(const typedst a) : bool
  -=delete(const typedst a) : inline bool

type Schedule[def schedFunc] : Sorted[Pair[Int, Int]] # Scheduler

type GC[def type] : Pair[type, Int] # GC
  _cnt : Signed[Int]
  _ent : type
  _ref : GC[type]
  ctor()
  ctor(type)
  ctor(GC[type])
  dtor()

type Graph[def type] : Matrix[type] # Graph plotter.
  +=place() : Array

# implementation depends on implementation, so shift/...
type Disk[Array = ArrayOnDisk, def lowlayer] : Array # Protocols: extremely huge.

type Gate[def layer, def lowlayer] : lowlayer # OSI reference

# Cluster : redundancy, interface.

# UTF, UCS, jis, euc, sjis are in the Shift/...
type Text : Array

cout : ...
cerr : ...

# Huge...
type BNF[def type] :
type SGML[def type] :
stemming(t : (Text | const Text)) : Array[...]

type Regex[def text] : Object # Regex preceding R.B. ...
  ctor(const text)
  ==match (const text) : # XXX

type Gregorious : Object # calender
  unix : Int
  ctor()
  friend Int()

# some procedures like:
#   attend/leave time logging and calculate total time with time zone.

# garbage collection with reference count type.

