using Meta.n

# Wait, pipe, etc...
# entity is in Shift/...
type Chip : Object : "chip root"
  _tick : Int(0)
  fn ++ ()
    # emulation
  # control, errata, each chip interface.

type Status[] : ...
  fn ctor(json : JSON) : void
  fn dtor() : void
  fn ++!(s : String) : Status

# entity is in Shift/...
type Mnemonic : ...
  fn ctor() : void
  fn dtor() : void
  fn ==() : void

fn optimizeFlow(v : Vector[Mnemonic]) : Vector[Mnemonic]
fn compile(v : Vector[Mnemonic]) : Vector[Mnemonic]

type Runner : 
  fn ctor() : void
  fn dtor() : void
  let c2r : Vector[Pair[Mnemonic, Mnemonic]]

type Perceptron[def type] : Matrix[type]
  def vec : Vector[type]
  fn +=(const vec, const vec) : bool
    # in
  fn +=(const vec) : bool
    # in
  fn -=(const vec) : vec
    # out

type Optron[def type] : Matrix[type]
  fn +=(const vec, const vec) : bool
    # in
  fn +=(const vec) : bool
    # in
  fn -=(vec) : vec
    # out

type Delayron[def type] : Array
  fn +=(const vec, const vec) : bool
    # in
  fn +=(const vec) : bool
    # in
  fn -=(vec) : vec
    # out

type BlockDiagram[def type] : Array[Perceptron[type]]
  def vec : Vector[type]
  fn +=(const vec, const vec) : bool
    # in
  fn +=(const vec) : bool
    # in
  fn -=(vec) : vec
    # out

