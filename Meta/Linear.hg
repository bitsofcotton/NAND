using Meta.System

class Vector[def type, def index, def Array = Array]
  def vector : Vector[type, index]
  let coeff  : type
  let entity : Array[type]
  fn  ctor() : void
  fn  ctor(const index) : void
  fn  dtor() : void
  fn  resize(const index) : vector
  fn  size() const : const index
  fn  init(fn ier(idx : index, entity : type) : void) : vector
  fn  O() const : vector
  fn  I() const : vector
  fn  op [] (const index)        : type
  fn  op [] (const index)  const : const type
  fn  op [] (const index, const index)        : vector
  fn  op [] (const index, const index)  const : const vector
  fn  op bool () const : bool
  fn  op -  ()             const : vector
  fn  dot         (const vector) const : type
  fn  op <eachAll (const vector) const : bool
  fn  op != (const vector) const : bool
  fn  op =  (vector)       : vector
  fn  op =  (const vector) : vector
  fn  op += (const vector) : vector
  fn  op -= (const vector) : vector
  fn  op *=  (const type)   : vector
  fn  op **= (const type)   : vector
  fn  op /=  (const type)   : vector
  fn  op %=  (const type)   : vector
  def less() : bool

class Matrix[def type, def index0, def Array = Array]
  def matrix : Matrix[type, index0]
  def vector : Vector[type, index0]
  def index  : Complex[index0]
  let transposed : bool
  let coeff  : type
  let entity : Array[vector]
  fn  ctor() : void
  fn  ctor(const index) : void
  fn  dtor() : void
  fn  resize(const index) : matrix
  fn  size() const : const index
  fn  init(fn ier(idx : index, entity : type) : void) : matrix
  fn  O() const : matrix
  fn  I() const : matrix
  fn  II() const : matrix
  fn  row(const index0) : vector
  fn  row(const index0) const : const vector
  fn  setCol(const index0, const vector) : void
  fn  col(const index0) const : const vector
  fn  op [] (const index)       : type
  fn  op [] (const index) const : const type
  fn  op [] (const index, const index)       : type
  fn  op [] (const index, const index) const : const type
  fn  op !  ()             const : bool
  fn  op -  ()             const : matrix
  fn  op *  (const vector) const : vector
  fn  op *  (const matrix) const : matrix
  fn  op ** (const type)   const : matrix
  fn  op <d  (const matrix) const : bool
  fn  op != (const vector) const : bool
  fn  op =  (matrix)       : matrix
  fn  op =  (const matrix) : matrix
  fn  op += (const matrix) : matrix
  fn  op -= (const matrix) : matrix
  fn  op *= (const type)   : matrix
  fn  transpose()                : matrix
  fn  transposed()         const : matrix

fn Eigen(const Matrix, Matrix, Matrix) : bool
fn Eigen(const Matrix, const Matrix, Matrix, Matrix, Matrix) : bool
fn LU(const Matrix, Matrix, Matrix) : bool
fn Cholesky(const Matrix, Matrix)   : bool
fn QR(const Matrix, Matrix, Matrix) : bool
fn FullQR(const Matrix, Matrix, Matrix) : bool
fn Schur(const Matrix, Matrix, Matrix) : bool
fn SVD(const Matrix, Matrix, Vector, Matrix) : bool
fn GSVD(const Matrix, const Matrix, Matrix, Matrix, Matrix) : bool
fn pseudoInverse(const Matrix) : Matrix
fn feasible(const Matrix, const Vector) : bool
fn LP(const Matrix, const Vector, const Vector) : Vector
fn QP(const Matrix, const Vector, const Matrix, const Vector) : Vector
fn Fourier(const Vector, const bool) : Vector
fn FastFourier(const Vector, const bool) : Vector
fn Diff(const Vector, const bool) : Vector
fn MotherWavelet(const Vector, const Vector, const bool) : Vector

class Complex[def type] : Object
  def complex : Complex[type]
  let real    : type
  let imag    : type
  fn ctor()   : void
  fn ctor(type)       : void
  fn ctor(const type) : void
  fn ctor(type, type) : void
  fn ctor(const type, const type) : void
  fn ctor(complex)    : void
  fn ctor(const complex) : void
  fn dtor()   : void
  fn size() const : const Int
  fn op []  (const Int) : type
  fn op !   () const    : bool
  fn op ~   () const    : complex
  fn op -   () const    : complex
  fn op *   (const complex) const : complex
  fn op **  (const complex) const : complex
  fn op /   (const complex) const : complex
  fn op !=  (const complex) const : bool
  fn op &&  (const complex) const : bool
  fn op ||  (const complex) const : bool
  fn op =   (complex)       : complex
  fn op =   (const complex) : complex
  fn op +=  (const complex) : complex
  fn op -=  (const complex) : complex
  fn op /=  (const complex) : complex
  fn op /=  (const type) : complex

fn abs(const Complex) : type
fn arg(const Complex) : type

class Quaternion[def type] : Object
  def quat  : Quaternion[type]
  let r1    : type
  let r2    : type
  let r3    : type
  let r4    : type
  fn ctor() : void
  fn ctor(type)       : void
  fn ctor(const type) : void
  fn ctor(Complex[type])       : void
  fn ctor(const Complex[type]) : void
  fn ctor(type, type, type, type) : void
  fn ctor(const type, const type, const type, const type) : void
  fn ctor(Complex[type], Complex[type])             : void
  fn ctor(const Complex[type], const Complex[type]) : void
  fn dtor()  : void
  fn size() const : const Int
  fn op []  (const Int) : type
  fn op !   () const    : bool
  fn op ~   () const    : quat
  fn op -   () const    : quat
  fn op *   (const quat) const : quat
  fn op **  (const quat) const : quat
  fn op /   (const quat) const : quat
  fn op +   (const quat) const : quat
  fn op -   (const quat) const : quat
  fn op !=  (const quat) const : bool
  fn op &&  (const quat) const : bool
  fn op ||  (const quat) const : bool
  fn op =   (quat)       : quat
  fn op =   (const quat) : quat
  fn op +=  (const quat) : quat
  fn op -=  (const quat) : quat
  fn op /=  (const type) : quat

class CayleyHamilton[def type, def base] : Object
  def ch    : CayleyHamilton[base]
  let r1    : type
  let r2    : type
  fn ctor() : void
  fn ctor(type) : void
  fn ctor(const type) : void
  fn ctor(CayleyHamilton[type]) : void
  fn ctor(const CayleyHamilton[type]) : void
  fn dtor() : void
  fn size() const : const Int
  fn op []  (const Int) : type
  fn op !   () const    : bool
  fn op ~   () const    : ch
  fn op -   () const    : ch
  fn op *   (const ch) const : ch
  fn op **  (const ch) const : ch
  fn op /   (const ch) const : ch
  fn op !=  (const ch) const : bool
  fn op &&  (const ch) const : bool
  fn op ||  (const ch) const : bool
  fn op =   (ch)       : ch
  fn op =   (const ch) : ch
  fn op +=  (const ch) : ch
  fn op -=  (const ch) : ch
  fn op /=  (const type) : ch

