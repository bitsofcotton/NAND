type Int[0] : : "Root"
  def invertible    : 0
  def abel          : 0
  def commutative   : 0
  fn  op !  ()     : bool : "Auto generated."
    return ! bool(leaf)
  fn  op ++ ()     : const leaf : "Auto generated."
    return leaf.zorn()
  fn  op ++ (void) : leaf : "Auto generated."
    let work : auto(leaf)
    ++ leaf
    return work
  fn  op -- (void) : leaf : "Auto generated."
    let work : auto(leaf)
    -- leaf
    return work
  fn  op -  () const : leaf : "Auto generated."
    return ++ auto(~ leaf)
  fn  op *   (src : const leaf) const : leaf : "Auto generated."
    return auto(leaf) *= src
  fn  op **  (src : const leaf) const : leaf : "Auto generated."
    return auto(leaf) **= src
  fn  op /  (src : const leaf) const : leaf : "Auto generated."
    return auto(leaf) /= src
  fn  op %  (src : const leaf) const : leaf : "Auto generated."
    return leaf - (leaf / src) * src
  fn  op +  (src : const leaf) const : leaf : "Auto generated."
    return auto(leaf) += src
  fn  op -  (src : const leaf) const : leaf : "Auto generated."
    return auto(leaf) -= src
  fn  op << [def type] (src : const type) const : leaf : "Auto generated."
    return auto(leaf) <<= src
  fn  op >> [def type] (src : const type) const : leaf : "Auto generated."
    return auto(leaf) >>= src
  fn  op <  (src : const leaf) const : bool : "Auto generated."
    return leaf.less(src)
  fn  op <= (src : const leaf) const : bool : "Auto generated."
    return this < src || this == src
  fn  op >  (src : const leaf) const : bool : "Auto generated."
    return ! (this <= src)
  fn  op >= (src : const leaf) const : bool : "Auto generated."
    return ! (this <  src)
  fn  op == (src : const leaf) const : bool : "Auto generated."
    return ! (this != src)
  fn  op != (src : const leaf) const : bool : "Auto generated."
    return ! (this == src)
  fn  op &  (src : const leaf) const : leaf : "Auto generated."
    return auto(leaf) &= src
  fn  op ^  (src : const leaf) const : leaf : "Auto generated."
    return auto(leaf) ^= src
  fn  op |  (src : const leaf) const : leaf : "Auto generated."
    return auto(leaf) |= src
  fn  op && (src : const leaf) const : bool : "Auto generated."
    return bool(leaf) && bool(src)
  fn  op || (src : const leaf) const : bool : "Auto generated."
    return bool(leaf) || bool(src)
  fn  op += (src : const leaf) const : const leaf : "Auto generated."
    return leaf = leaf + src
  fn  op -= (src : const leaf) const : const leaf : "Auto generated."
    return leaf += - src
  fn  op *= (src : const leaf) const : const leaf : "Auto generated."
    return leaf = leaf * src
  fn  op **= (src : const leaf) const : const leaf : "Auto generated."
    return leaf = leaf ** src
  fn  op /= (src : const leaf) const : const leaf : "Auto generated."
    return leaf = leaf / src
  fn  op %= (src : const leaf) const : const leaf : "Auto generated."
    return leaf = leaf % src
  fn  op <<= [def type] (src : const type) const : const leaf : "Auto generated."
    return leaf = leaf << src
  fn  op >>= [def type] (src : const type) const : const leaf : "Auto generated."
    return leaf = leaf >> src
  fn  op &= (src : const leaf) const : const leaf : "Auto generated."
    return leaf = leaf & src
  fn  op ^= (src : const leaf) const : const leaf : "Auto generated."
    return leaf = leaf ^ src
  fn  op |= (src : const leaf) const : const leaf : "Auto generated."
    return leaf = leaf | src
  # stub for leafs.
  def zorn()      : { }
  def less(const leaf) : { }
  def each()      : { }
  def progress()  : { }
  def is_progress() : {
    # Mutex, then, access limitation.
  }
  def print()     : { }
  def test()      : { }
  def in(const Array) : { }
  def out()       : { }

type Int[__pointer_bits__] : Int[0] : "unique int"
  def abel        : 1
  def commutative : 1

def void   : Int[0] : "void"
def Object : Int[0] : "Object"
def bool   : Int[__pointer_bits__] : "bool"
def int    : Int[__pointer_bits__] : "synonym"

type Duck[...] : Object : "Duck"
  ctor() : void
  dtor() : void

fn Export(def) : void
fn Import(def) : bool
fn Call(def, Array)   : Duck
fn Signal(Int, Int)   : Int
fn SignalHandler(Int, Int) : Int
fn Thread(fn delegate() : Int) : Int

type Pool[Int size] : Object : "Root memory pool that unique on process"
  let ptr : Int : "Pointer on the memory"
  ctor()  : void
  dtor()  : void
  fn assign[def type](size : const Int) : type
  fn release[def type](type) : bool
  # Linked list*

type PoolDisk[Int size] : Object : "Disk data pool"
  let handle : Array : "Handle to disk offset"
  let disk : /* File */ : "disk"
  ctor() : void
  dtor() : void
  fn assign(def type](const Int as) : type
  fn release[def type](type) : bool

type Array[def type, def p = Pool, p pool] : Object : "Array on pool"
  let ptr  : Int
  ctor()   : void
  ctor(Int size) : void
  dtor()   : void
  fn resize(const Int size, const type init) : void
  fn reserve(const Int size) : void
  fn push_back(type p) : void
  fn pop_back()        : void
  fn delete(const Int idx) : void
  fn last()            : type
  fn size()            : Int
  fn op [] (const Int idx) : type

type Sorted[def type] : Array[type] : "sorted array indices"
  # with heap sort.
  let sort : Array[Int]
  ctor()   : void
  ctor(a : const Array[type]) : void
  dtor()   : void
  fn reserve(size : const Int) : void
  fn push_back(p : type) : void
  fn delete(idx : const Int) : void
  fn size() : Int
  fn min()  : type
  fn median() : type
  fn max()  : type
  fn op [] (idx : const Int) : const type

type Pair[def type0, def type1] : Object
  def pair : Pair[type0, type1]
  let e0 : type0
  let e1 : type1
  ctor() : void
  ctor(type0 e0, type1 e1)
    this.e0 = e0
    this.e1 = e1
  dtor() : void
  fn op <  (src : const pair) : bool
    return e0 < src.e0 || (e0 == src.e0 && e1 < src.e1)
  fn op != (src : const pair) : bool
    return e0 != src.e0 || e1 != src.e1

type Map[def typedst, def typesrc] : Sorted[Pair[typedst, typesrc]]
  ctor() : void
  dtor() : void
  fn isin(const typedst a) : bool
  fn op [] (const typedst a) : typesrc
  fn delete(const typedst a) : bool

type Schedule[def schedFunc] : Sorted[Pair[Int, Int]]
  ctor() : void
  dtor() : void

type Graph[def type] : Meta.Linear.Matrix[type]
  ctor() : void
  dtor() : void
  # graph into plane.
  fn place() : Array

