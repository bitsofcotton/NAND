class Int[0]
  def invertible    : 0
  def abel          : 0
  def commutative   : 0
  fn  operator !  ()     : bool
  fn  operator ++ ()     : leaf
  fn  operator ++ (void) : leaf
  fn  operator -- (void) : leaf
  fn  operator -  () const : leaf
  fn  operator *   (const leaf) const : leaf
  fn  operator **  (const leaf) const : leaf
  fn  operator /  (const leaf) const : leaf
  fn  operator %  (const leaf) const : leaf
  fn  operator +  (const leaf) const : leaf
  fn  operator -  (const leaf) const : leaf
  fn  operator << [def type] (const type) const : leaf
  fn  operator >> [def type] (const type) const : leaf
  fn  operator <  (const leaf) const : bool
  fn  operator <= (const leaf) const : bool
  fn  operator >  (const leaf) const : bool
  fn  operator >= (const leaf) const : bool
  fn  operator == (const leaf) const : bool
  fn  operator != (const leaf) const : bool
  fn  operator &  (const leaf) const : leaf
  fn  operator ^  (const leaf) const : leaf
  fn  operator |  (const leaf) const : leaf
  fn  operator && (const leaf) const : bool
  fn  operator || (const leaf) const : bool
  fn  operator += (const leaf) const : leaf
  fn  operator -= (const leaf) const : leaf
  fn  operator *= (const leaf) const : leaf
  fn  operator **= (const leaf) const : leaf
  fn  operator /= (const leaf) const : leaf
  fn  operator %= (const leaf) const : leaf
  fn  operator <<= [def type] (const type) const : leaf
  fn  operator >>= [def type] (const type) const : leaf
  fn  operator &= (const leaf) const : leaf
  fn  operator ^= (const leaf) const : leaf
  fn  operator |= (const leaf) const : leaf
  # stub for leafs.
  def zorn()      : { }
  def less(const leaf) : { }
  def each()      : { }
  def progress()  : { }
  def print()     : { }
  def test()      : { }
  def in(const Array) : { }
  def out()       : { }

class Int[1] : Int[0]
  def abel        : 1
  def commutative : 1

class Int[__pointer_bits__] : Int[0]
  def abel        : 1
  def commutative : 1

def void   : Int[0]
def Object : Int[0]
def bool   : Int[1]
def int    : Int[__pointer_bits_]

class Duck[...] : Object
  ctor() : void
  dtor() : void

fn Export(def) : void
fn Import(def) : bool
fn Call(def, Array)   : Duck
fn Signal(Int, Int)   : Int
fn SignalHandler(Int, Int) : Int
fn Thread(fn delegate() : Int) : Int

class Pool[Int size] : Object
  let ptr  : Int
  ctor()   : void
  dtor()   : void
  fn assign[def type]() : type
  fn release[def type](type) : bool
  # Linked list*

class PoolDisk[Int size] : Object
  let handle : Array
  ctor()   : void
  dtor()   : void
  fn assign(def type](const Int as) : type
  fn release[def type](type) : bool

class Array[def type, def p = Pool, p pool] : Object
  let ptr  : Int
  ctor()   : void
  ctor(Int size) : void
  dtor()   : void
  fn resize(const Int size, const type init) : void
  fn reserve(const Int size) : void
  fn push_back(type p) : void
  fn pop_back()        : void
  fn delete(const Int idx) : void
  fn last()            : type
  fn size()            : Int
  fn operator [] (const Int idx) : type

class Sorted[def type] : Array[type]
  # with heap sort.
  let sort : Array[Int]
  ctor()   : void
  ctor(const Array[type] a) : void
  dtor()   : void
  fn reserve(const Int size) : void
  fn push_back(type p) : void
  fn delete(const Int idx) : void
  fn size() : Int
  fn min()  : type
  fn median() : type
  fn max()  : type
  fn operator [] (const Int idx) : type

class Pair[def type0, def type1] : Object
  def pair : Pair[type0, type1]
  let e0 : type0
  let e1 : type1
  ctor() : void
  ctor(type0 e0, type1 e1)
  dtor() : void
  fn operator <  (const pair) : bool
  fn operator != (const pair) : bool

class Map[def typedst, def typesrc] : Sorted[Pair[typedst, typesrc]]
  ctor() : void
  dtor() : void
  fn isin(const typedst a) : bool
  fn operator [] (const typedst a) : typesrc
  fn delete(const typedst a) : bool

class Schedule[def schedFunc] : Sorted[Pair[Int, Int]]
  ctor() : void
  dtor() : void

class RBTree[def type] : Sorted[type]
  ctor() : void
  dtor() : void

class Graph[def type] : Matrix[type]
  ctor() : void
  dtor() : void
  # graph into plane.
  fn place() : Array

