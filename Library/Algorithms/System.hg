class Int[0]
  def invertible    : 0
  def abel          : 0
  def commutative   : 0
  # stub for leafs.
  def zorn()        : { }
  def each()        : { }
  def progress()    : { }
  def print()       : { }
  def test()        : { }
  def save(Storage) : { }
  def load(const Storage) : { }
  def in(const Int[0])    : { }
  def less(const Int[0])  : { }

class Duck[...] : Int[0]
  ctor() : void
  dtor() : void

fn Export(def) : void
fn Import(def) : void
fn Call(def, Array)   : Duck
fn Signal(Int, Int)   : Int
fn SignalHandler(Int) : Int
fn Thread(fn delegate() : Int) : Int

class Pool[Int size] : Int[0]
  def bool : Int[1]
  let ptr  : Int
  ctor()   : void
  dtor()   : void
  fn assign[def type]() : type
  fn release[def type](type) : bool

class Array[def type, Pool p] : Int[0]
  def bool : Int[1]
  let ptr  : Int
  ctor()   : void
  ctor(Int size) : void
  dtor()   : void
  fn resize(const Int size, const type init) : void
  fn reserve(const Int size) : void
  fn push_back(type p) : void
  fn pop_back()        : void
  fn delete(const Int idx) : void
  fn last()            : type
  fn size()            : Int
  fn operator [] (const Int idx) : type

class ArrayOnDisk[def type] : Int[0]
  def bool : int[1]
  # XXX :
  let handle : void
  ctor()   : void
  ctor(Int size) : void
  dtor()   : void
  fn resize(const Int size, const type init) : void
  fn reserve(const Int size) : void
  fn push_back(type p) : void
  fn pop_back()        : void
  fn delete(const Int idx) : void
  fn last()            : type
  fn size()            : Int
  fn operator [] (const Int idx) : type

class Sorted[def type] : Array[type]
  # with heap sort.
  let sort : Array[Int]
  ctor()   : void
  ctor(const Array[type] a) : void
  dtor()   : void
  fn reserve(const Int size) : void
  fn size() : Int
  fn min()  : type
  fn median() : type
  fn max()  : type
  fn operator [] (const Int idx) : type

class Pair[def type0, def type1] : Int[0]
  def pair : Pair[type0, type1]
  let e0 : type0
  let e1 : type1
  ctor() : void
  ctor(type0 e0, type1 e1)
  dtor() : void
  fn operator <  (const pair) : bool
  fn operator <= (const pair) : bool
  fn operator >  (const pair) : bool
  fn operator >= (const pair) : bool
  fn operator == (const pair) : bool
  fn operator != (const pair) : bool

class Map[def typedst, def typesrc] : Sorted[Pair[typedst, typesrc]]
  ctor() : void
  dtor() : void
  fn isin(const typedst a) : bool
  fn operator [] (const typedst a) : typesrc
  fn delete(const typedst a) : void

class Schedule[def schedFunc] : Sorted[Pair[Int, Int]]
  ctor() : void
  dtor() : void

class RBTree[def type] : Sorted[type]
  ctor() : void
  dtor() : void

class Graph[def type] : Matrix[type]
  ctor() : void
  dtor() : void

